<%- include("../../views/admin/partials/header") %>

<head>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"
  />
  <!-- Material Icons font -->
  <link
    href="https://fonts.googleapis.com/icon?family=Material+Icons"
    rel="stylesheet"
  />
  <style>
    .error-message {
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
 </style>
</head>

<div class="content-main">
    <div class="content-header">
        <div class="content-title">
            <h4>Coupons Management</h4>
        </div>
        <button type="button" class="btn btn-success" style="margin-bottom: 20px;" data-bs-toggle="modal" data-bs-target="#addCouponModal">Create Coupon</button>
    </div>

    <!-- Add Coupon Modal -->
    <div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCouponModalLabel">Create New Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addCouponForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="couponCode" class="form-label">Coupon Code</label>
                                <input type="text" class="form-control" id="couponCode" name="code" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="offerAmount" class="form-label">Offer Amount</label>
                                <input type="number" class="form-control" id="offerAmount" name="offerPrice" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="minimumPurchase" class="form-label">Minimum Purchase Amount</label>
                                <input type="number" class="form-control" id="minimumPurchase" name="minimumPrice" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="startDate" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="startDate" name="startOn" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="usageLimit" class="form-label">Usage Limit</label>
                                <input type="number" class="form-control" id="usageLimit" name="maxUses" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="expirationDate" class="form-label">Expiration Date</label>
                                <input type="date" class="form-control" id="expirationDate" name="expireOn" required>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" form="addCouponForm" class="btn btn-primary">Create Coupon</button>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Offer Amount</th>
                            <th>Minimum Purchase</th>
                            <th>Start Date</th>
                            <th>Usage Limit</th>
                            <th>Used Count</th>
                            <th>Expiration Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% coupons.forEach(coupon => { %>
                            <tr>
                                <td><%= coupon.code %></td>
                                <td>₹<%= coupon.offerPrice %></td>
                                <td>₹<%= coupon.minimumPrice %></td>
                                <td><%= new Date(coupon.startOn).toISOString().split('T')[0] %></td>
                                <td><%= coupon.maxUses %></td>
                                <td><%= coupon.usesCount %></td>
                                <td><%= new Date(coupon.expireOn).toISOString().split('T')[0] %></td>
                                <td><%= coupon.isListed ? 'Active' : 'Inactive' %></td>
                                <td>
                                <button 
                                    class="btn btn-sm list-toggle-btn" 
                                    onclick="toggleCouponStatus('<%= coupon._id %>', <%= coupon.isListed %>)"
                                    style="background-color: <%= coupon.isListed ? '#dc3545' : '#198754' %>; color: white;">
                                    <%= coupon.isListed ? 'Unlist' : 'List' %>
                                </button>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Pagination  -->
        <div class="card-footer">
            <nav aria-label="Page navigation" class="d-flex justify-content-center mt-4">
                <ul class="pagination">
                    <% if (hasPrevPage) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    <% } %>
                    
                    <% for(let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                    <% } %>
                    
                    <% if (hasNextPage) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    <% } %>
                </ul>
            </nav>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
    // Helper function to display error messages
    function displayError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message text-danger mt-1';
        errorDiv.textContent = message;
        field.parentNode.appendChild(errorDiv);
    }

    // Function to handle coupon listing and unlisting
    async function toggleCouponStatus(couponId, currentStatus) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: `This coupon will be ${currentStatus ? 'unlisted' : 'listed'}!`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: `Yes, ${currentStatus ? 'unlist' : 'list'} it!`
        });

        if (result.isConfirmed) {
            const response = await fetch(`/admin/toggleCouponStatus/${couponId}`, {
                method: 'PATCH'
            });
            const data = await response.json();
            
            if (data.success) {
                await Swal.fire(
                    'Success!',
                    `The coupon has been ${data.isListed ? 'listed' : 'unlisted'}.`,
                    'success'
                );
                location.reload();
            } else {
                Swal.fire(
                    'Error!',
                    data.message || 'Error updating coupon status',
                    'error'
                );
            }
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire(
            'Error!',
            'An error occurred while updating the coupon status',
            'error'
        );
    }
}

    // Reset form and clear errors when modal is closed
    document.getElementById('addCouponModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('addCouponForm').reset();
        document.querySelectorAll('.error-message').forEach(el => el.remove());
    });

    // Initialize date restrictions
    document.addEventListener('DOMContentLoaded', function() {
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('startDate').setAttribute('min', today);
        
        // Update expiry date min when start date changes
        document.getElementById('startDate').addEventListener('change', function() {
            const startDate = this.value;
            document.getElementById('expirationDate').setAttribute('min', startDate);
            
            // Clear expiry date if it's before start date
            const expirationDate = document.getElementById('expirationDate');
            if (expirationDate.value && expirationDate.value <= startDate) {
                expirationDate.value = '';
            }
        });
    });

    // Form submission handling
    document.getElementById('addCouponForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Clear any existing error messages
        document.querySelectorAll('.error-message').forEach(el => el.remove());
        
        // Convert coupon code to uppercase
        const codeInput = document.getElementById('couponCode');
        codeInput.value = codeInput.value.toUpperCase();
        
        const offerAmount = Number(document.getElementById('offerAmount').value);
        const minimumPurchase = Number(document.getElementById('minimumPurchase').value);
        const startDate = new Date(document.getElementById('startDate').value);
        const expirationDate = new Date(document.getElementById('expirationDate').value);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        let hasError = false;

        // Validate offer amount
        if (offerAmount >= minimumPurchase) {
            displayError('offerAmount', 'Offer amount must be less than minimum purchase amount');
            hasError = true;
        }

        // Validate start date
        if (startDate < today) {
            displayError('startDate', 'Start date cannot be in the past');
            hasError = true;
        }

        // Validate expiration date
        if (expirationDate <= startDate) {
            displayError('expirationDate', 'Expiry date must be after start date');
            hasError = true;
        }

        // Validate usage limit
        const usageLimit = Number(document.getElementById('usageLimit').value);
        if (usageLimit <= 0) {
            displayError('usageLimit', 'Usage limit must be greater than 0');
            hasError = true;
        }

        if (hasError) {
            return;
        }

        const formData = {
            code: codeInput.value,
            offerPrice: offerAmount,
            minimumPrice: minimumPurchase,
            startOn: document.getElementById('startDate').value,
            maxUses: usageLimit,
            expireOn: document.getElementById('expirationDate').value
        };

        try {
            const response = await fetch('/admin/addCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (data.success) {
                // Show success message
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Coupon created successfully',
                    timer: 1500
                });
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addCouponModal'));
                modal.hide();
                
                // Refresh the page to show new coupon
                location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.message || 'Error creating coupon'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while creating the coupon'
            });
        }
    });
</script>

<%- include("../../views/admin/partials/footer") %>
