<%- include("../../views/user/partials/header") %>

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!--=============== FLATICON ===============-->
    <link rel="stylesheet"
      href="https://cdn-uicons.flaticon.com/2.0.0/uicons-regular-straight/css/uicons-regular-straight.css" />

    <!--=============== SWEETALERT CSS LINK ===============-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />

    <!--=============== CSS ===============-->
    <link rel="stylesheet" href="/assets/css/styles.css" />

    <title>User Address</title>
    <style>
      .address-section {
        padding: 20px;
        border-top: 1px solid var(--border-color);
      }

      .add-address-btn {
        background-color: var(--first-color);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        margin-bottom: 20px;
        cursor: pointer;
      }

      .address-card {
        border: 1px solid var(--border-color);
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 4px;
      }

      .address-card p {
        margin: 5px 0;
      }

      .address-actions {
        margin-top: 10px;
        display: flex;
        gap: 10px;
      }

      .edit-btn,
      .delete-btn {
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .edit-btn {
        background-color: var(--first-color);
        color: white;
      }

      .delete-btn {
        background-color: #dc3545;
        color: white;
      }

      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
      }

      .modal-content {
        position: relative;
        background-color: white;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        width: 80%;
        max-width: 500px;
        border-radius: 8px;
      }

      .close-modal {
        position: absolute;
        right: 20px;
        top: 10px;
        font-size: 24px;
        cursor: pointer;
      }

      /* Address form styles */
      #addAddressForm .detail-row {
        margin-bottom: 15px;
      }

      #addAddressForm select {
        flex: 1;
        padding: 8px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background-color: white;
        color: var(--text-color);
        width: 100%;
      }

      #addAddressForm select:focus {
        outline: none;
        border-color: var(--first-color);
      }

      #addAddressForm .change-btn {
        margin-top: 10px;
        width: 100%;
      }

      .detail-row {
        display: flex;
        margin-bottom: 20px;
        align-items: center;
      }

      .detail-row label {
        width: 100px;
        font-weight: var(--weight-600);
      }

      .detail-content {
        flex: 1;
        display: flex;
        gap: 10px;
        align-items: center;
      }

      .detail-content input {
        flex: 1;
        padding: 8px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
      }
    </style>
  </head>

  <body>
    <main class="main">
      <section class="accounts section--lg">
        <div class="accounts__container container grid">
          <!-- Left Side Navigation -->
          <div class="account__tabs">
            <p class="account__tab">
              <i class="fi fi-rs-user"></i> <a href="/user-profile">My Info</a>
            </p>
            <p class="account__tab">
              <i class="fi fi-rs-map-marker"></i> <a href="/user-address">Address</a>
            </p>
            <p class="account__tab">
              <i class="fi fi-rs-shopping-bag"></i>
              <a href="/my-orders">My Orders</a>
            </p>
            <p class="account__tab active">
              <i class="fi fi-rs-wallet"></i>
              <a href="/user-wallet">My Wallet</a>
            </p>
            <p class="account__tab">
              <i class="fi fi-rs-sign-out"></i> <a href="/logout">Logout</a>
            </p>
          </div>

          <!-- Address Section -->
          <div class="address-section">
            <h3>Address Management</h3>
            <button class="add-address-btn" onclick="openAddAddressModal()">Add New</button>

            <div id="addressList" class="addresses-container">
              <% if (addresses && addresses.length> 0) { %> <% addresses.forEach(address=> { %>
                  <div class="address-card">
                    <p class="name">
                      <%= address.fullName %>
                    </p>
                    <p class="phone">
                      <%= address.phone %>
                    </p>
                    <p class="address">
                      <%= address.address %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %>
                    </p>
                    <div class="address-actions">
                      <button class="edit-btn" data-address-id="<%= address._id %>"
                        onclick="editAddress('<%= address._id %>')">
                        Edit
                      </button>
                      <button class="delete-btn" data-address-id="<%= address._id %>"
                        onclick="deleteAddress('<%= address._id %>')">
                        Delete
                      </button>
                    </div>
                  </div>
                  <% }) %>
                    <% } else { %>
                      <p>No addresses found</p>
                      <% } %>
            </div>
          </div>
        </div>
        </div>


        <!--  Address Modal -->
        <div id="addAddressModal" class="modal">
          <div class="modal-content">
            <span class="close-modal" onclick="closeAddAddressModal()">&times;</span>
            <h3>Add New Address</h3>
            <form id="addAddressForm" class="user-details">
              <div class="detail-row">
                <label>Full Name:</label>
                <div class="detail-content">
                  <input type="text" id="fullName" name="fullName" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Phone:</label>
                <div class="detail-content">
                  <input type="tel" id="phone" name="phone" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Alt Phone:</label>
                <div class="detail-content">
                  <input type="tel" id="altPhone" name="altPhone" />
                </div>
              </div>
              <div class="detail-row">
                <label>Landmark:</label>
                <div class="detail-content">
                  <input type="text" id="landmark" name="landmark" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Address:</label>
                <div class="detail-content">
                  <input type="text" id="address" name="address" required />
                </div>
              </div>
              <div class="detail-row">
                <label>City:</label>
                <div class="detail-content">
                  <input type="text" id="city" name="city" required />
                </div>
              </div>
              <div class="detail-row">
                <label>State:</label>
                <div class="detail-content">
                  <input type="text" id="state" name="state" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Pincode:</label>
                <div class="detail-content">
                  <input type="text" id="pincode" name="pincode" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Type:</label>
                <div class="detail-content">
                  <select id="addressType" name="addressType" required>
                    <option value="">Select Type</option>
                    <option value="home">Home</option>
                    <option value="work">Work</option>
                  </select>
                </div>
              </div>
              <button type="submit" class="change-btn">Save Address</button>
            </form>
          </div>
        </div>

        <!--  Edit Address Modal -->
        <div id="editAddressModal" class="modal">
          <div class="modal-content">
            <span class="close-modal" onclick="closeEditAddressModal()">&times;</span>
            <h3>Edit Address</h3>
            <form id="editAddressForm" class="user-details">
              <input type="hidden" id="editAddressId" name="addressId">
              <div class="detail-row">
                <label>Full Name:</label>
                <div class="detail-content">
                  <input type="text" id="editFullName" name="fullName" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Phone:</label>
                <div class="detail-content">
                  <input type="tel" id="editPhone" name="phone" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Alt Phone:</label>
                <div class="detail-content">
                  <input type="tel" id="editAltPhone" name="altPhone" />
                </div>
              </div>
              <div class="detail-row">
                <label>Landmark:</label>
                <div class="detail-content">
                  <input type="text" id="editLandmark" name="landmark" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Address:</label>
                <div class="detail-content">
                  <input type="text" id="editAddress" name="address" required />
                </div>
              </div>
              <div class="detail-row">
                <label>City:</label>
                <div class="detail-content">
                  <input type="text" id="editCity" name="city" required />
                </div>
              </div>
              <div class="detail-row">
                <label>State:</label>
                <div class="detail-content">
                  <input type="text" id="editState" name="state" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Pincode:</label>
                <div class="detail-content">
                  <input type="text" id="editPincode" name="pincode" required />
                </div>
              </div>
              <div class="detail-row">
                <label>Type:</label>
                <div class="detail-content">
                  <select id="editAddressType" name="addressType" required>
                    <option value="">Select Type</option>
                    <option value="home">Home</option>
                    <option value="work">Work</option>
                  </select>
                </div>
              </div>
              <button type="submit" class="change-btn">Update Address</button>
            </form>
          </div>
        </div>
        </div>
      </section>
    </main>
  </body>
  <%- include("../../views/user/partials/footer") %>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      //Add Address Modal functionality
      function openAddAddressModal() {
        document.getElementById("addAddressModal").style.display = "block";
      }

      function closeAddAddressModal() {
        document.getElementById("addAddressModal").style.display = "none";
      }

      function openEditAddressModal() {
        document.getElementById("editAddressModal").style.display = "block";
      }

      function closeEditAddressModal() {
        document.getElementById("editAddressModal").style.display = "none";
      }

      // Close modal when clicking outside
      window.onclick = function (event) {
        const addModal = document.getElementById("addAddressModal");
        const editModal = document.getElementById("editAddressModal");

        if (event.target === addModal) {
          closeAddAddressModal();
        } else if (event.target === editModal) {
          closeEditAddressModal();
        }
      };

      // Close modal button event listener
      document.querySelector('.close-modal').addEventListener('click', closeAddAddressModal);

      // Add Address Form Submission
      const addAddressForm = document.getElementById("addAddressForm");
      const addressList = document.getElementById("addressList");

      addAddressForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Get form data and create address object
        const formData = new FormData(addAddressForm);
        const addressData = {
          fullName: formData.get("fullName"),
          phone: formData.get("phone"),
          altPhone: formData.get("altPhone"),
          address: formData.get("address"),
          landmark: formData.get("landmark"),
          city: formData.get("city"),
          state: formData.get("state"),
          pincode: formData.get("pincode"),
          addressType: formData.get("addressType"),
        };

        try {
          const response = await fetch("/add-address", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(addressData),
          });

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Success",
              text: "Address added successfully!",
            }).then(() => {
              closeAddAddressModal();
              loadAddresses(); // Refresh address list
              addAddressForm.reset();
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: data.message || "Failed to add address",
            });
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong!",
          });
        }
      });

      // Function to load addresses
      async function loadAddresses() {
        try {
          const response = await fetch("/get-addresses");
          const data = await response.json();

          if (data.success) {
            addressList.innerHTML = data.addresses
              .map(
                (address) => `
            <div class="address-card">
              <p><strong>${address.fullName}</strong></p>
              <p>${address.address}</p>
              <p>${address.city}, ${address.state} - ${address.pincode}</p>
              <p>Mobile: ${address.phone}</p>
              <div class="address-actions">
                <button class="edit-btn" onclick="editAddress('${address._id}')">Edit</button>
                <button class="delete-btn" onclick="deleteAddress('${address._id}')">Delete</button>
              </div>
            </div>
          `
              )
              .join("");
          }
        } catch (error) {
          console.error("Error loading addresses:", error);
        }
      }

      // Delete address function
      async function deleteAddress(addressId) {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, delete it!",
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch(`/delete-address/${addressId}`, {
              method: "DELETE",
            });
            const data = await response.json();

            if (data.success) {
              Swal.fire("Deleted!", "Address has been deleted.", "success");
              loadAddresses(); // Refresh address list
            } else {
              Swal.fire("Error!", data.message || "Failed to delete address", "error");
            }
          } catch (error) {
            console.error("Error:", error);
            Swal.fire("Error!", "Something went wrong!", "error");
          }
        }
      }

      // Edit address function
      async function editAddress(addressId) {
        try {
          const response = await fetch(`/get-address/${addressId}`);
          const data = await response.json();

          if (data.success) {
            const address = data.address;

            // Fill the edit form with address data
            document.getElementById("editAddressId").value = address._id;
            document.getElementById("editFullName").value = address.fullName;
            document.getElementById("editPhone").value = address.phone;
            document.getElementById("editAltPhone").value = address.altPhone || '';
            document.getElementById("editLandmark").value = address.landmark;
            document.getElementById("editAddress").value = address.address;
            document.getElementById("editCity").value = address.city;
            document.getElementById("editState").value = address.state;
            document.getElementById("editPincode").value = address.pincode;
            document.getElementById("editAddressType").value = address.addressType;

            openEditAddressModal();
          } else {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: data.message || "Failed to fetch address details",
            });
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong!",
          });
        }
      }

      // Edit Address Form Submission
      const editAddressForm = document.getElementById("editAddressForm");

      editAddressForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(editAddressForm);
        const addressId = document.getElementById("editAddressId").value;
        const addressData = {
          fullName: formData.get("fullName"),
          phone: formData.get("phone"),
          altPhone: formData.get("altPhone"),
          address: formData.get("address"),
          landmark: formData.get("landmark"),
          city: formData.get("city"),
          state: formData.get("state"),
          pincode: formData.get("pincode"),
          addressType: formData.get("addressType"),
        };

        try {
          const response = await fetch(`/update-address/${addressId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(addressData),
          });

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Success",
              text: "Address updated successfully!",
            }).then(() => {
              closeEditAddressModal();
              loadAddresses(); // Refresh address list
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: data.message || "Failed to update address",
            });
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Something went wrong!",
          });
        }
      });

      // Initial load of addresses
      loadAddresses();
    </script>