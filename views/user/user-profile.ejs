<%- include("../../views/user/partials/header") %>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!--=============== FLATICON ===============-->
  <link
    rel="stylesheet"
    href="https://cdn-uicons.flaticon.com/2.0.0/uicons-regular-straight/css/uicons-regular-straight.css"
  />

  <!--=============== SWEETALERT CSS LINK ===============-->
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css"
  />

  <!--=============== CROPPER CSS LINK ===============-->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

  <!--=============== CSS ===============-->
  <link rel="stylesheet" href="/assets/css/styles.css" />

  <title>User Profile</title>
  <style>
    .user-details {
      padding: 20px;
    }

    .detail-row {
      display: flex;
      margin-bottom: 20px;
      align-items: center;
    }

    .detail-row label {
      width: 100px;
      font-weight: var(--weight-600);
    }

    .detail-content {
      flex: 1;
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .detail-content input {
      flex: 1;
      padding: 8px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
    }

    .change-btn {
      background-color: var(--first-color);
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
    }

    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
    }

    .modal-content {
      position: relative;
      background-color: white;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      width: 80%;
      max-width: 500px;
      border-radius: 8px;
    }

    .close-modal {
      position: absolute;
      right: 20px;
      top: 10px;
      font-size: 24px;
      cursor: pointer;
    }

    .password-field {
      position: relative;
      flex: 1;
      display: flex;
    }

    .toggle-password {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      background: none;
      border: none;
      color: var(--text-color);
    }

    .a {
      text-decoration: none;
    }
  </style>
</head>
<body>
  <main class="main">
    <section class="accounts section--lg">
      <div class="accounts__container container grid">
        <!-- Left Side Navigation -->
        <div class="account__tabs">
          <p class="account__tab">
            <i class="fi fi-rs-user"></i> <a href="/user-profile">My Info</a>
          </p>
          <p class="account__tab">
            <i class="fi fi-rs-map-marker"></i> <a href="/user-address">Address</a>
          </p>
          <p class="account__tab">
            <i class="fi fi-rs-shopping-bag"></i>
            <a href="/my-orders">My Orders</a>
          </p>
          <p class="account__tab active">
            <i class="fi fi-rs-wallet"></i>
            <a href="/user-wallet">My Wallet</a>
          </p>
          <p class="account__tab">
            <i class="fi fi-rs-sign-out"></i> <a href="/logout">Logout</a>
          </p>
        </div>

        <!-- User Profile Section -->
        <div class="tab__content active-tab">
          <div class="tab__pane">
            <h3 class="tab__header">Contact Details</h3>
            <div class="tab__body">
              <!-- User Details Section -->
              <div class="user-details">
                <div class="detail-row">
                  <label>Profile Picture:</label>
                  <div class="detail-content">
                    <img src="<%= user.profilePicture || '/assets/images/default-profile.png' %>" 
                         alt="Profile" 
                         id="profilePicDisplay" 
                         style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;">
                    <button class="change-btn" onclick="openProfilePicModal()">Change</button>
                  </div>
                </div>

                  <div class="detail-row">
                    <label>Name:</label>
                    <div class="detail-content">
                      <span id="displayName"><%= user.name %></span>
                      <button class="change-btn" onclick="openEditNameModal()">Change</button>
                    </div>
                  </div>

                <div class="detail-row">
                  <label>Email:</label>
                  <div class="detail-content">
                    <span><%= user.email %></span>
                  </div>
                </div>

                <div class="detail-row">
                  <label>Password:</label>
                  <div class="detail-content">
                    <span>********</span>
                    <button class="change-btn" onclick="openChangePasswordModal()">Change</button>
                  </div>
                </div>

                <div class="detail-row">
                  <label>Referral Code:</label>
                  <div class="detail-content">
                    <span id="referralCode"><%= user.referralCode || 'Not Generated' %></span>
                    <% if (user.referralCode) { %>
                      <button class="change-btn" onclick="copyReferralCode()">Copy</button>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Edit Name Modal -->
        <div id="editNameModal" class="modal">
          <div class="modal-content">
            <span class="close-modal" onclick="closeEditNameModal()">&times;</span>
            <h3>Edit Name</h3>
            <form id="editNameForm" class="user-details">
              <div class="detail-row">
                <label for="editNameField">Name:</label>
                <div class="detail-content">
                  <input type="text" id="editNameField" name="name" required />
                </div>
              </div>
              <button type="submit" class="change-btn">Save Changes</button>
            </form>
          </div>
        </div>

         <!-- Change Password Modal -->
         <div id="changePasswordModal" class="modal">
          <div class="modal-content">
            <span class="close-modal" onclick="closeChangePasswordModal()">&times;</span>
            <h3>Change Password</h3>
            <form id="changePasswordForm" class="user-details">
              <div class="detail-row">
                <label for="newPassword">New:</label>
                <div class="detail-content">
                  <div class="password-field">
                    <input type="password" id="newPassword" name="newPassword" required />
                    <button type="button" class="toggle-password" onclick="togglePassword('newPassword')">
                      <i class="fi fi-rs-eye"></i>
                    </button>
                  </div>
                </div>
              </div>

              <div class="detail-row">
                <label for="confirmPassword">Confirm:</label>
                <div class="detail-content">
                  <div class="password-field">
                    <input type="password" id="confirmPassword" name="confirmPassword" required />
                    <button type="button" class="toggle-password" onclick="togglePassword('confirmPassword')">
                      <i class="fi fi-rs-eye"></i>
                    </button>
                  </div>
                </div>
              </div>

              <button type="submit" class="change-btn">Change Password</button>
            </form>
          </div>
        </div>

        <!-- Profile picture modal  -->
        <div id="profilePicModal" class="modal">
          <div class="modal-content">
            <span class="close-modal" onclick="closeProfilePicModal()">Ã—</span>
            <h3>Update Profile Picture</h3>
            <form id="profilePicForm" enctype="multipart/form-data">
              <div class="detail-row">
                <label for="profilePicInput">Select Image:</label>
                <input type="file" 
                       id="profilePicInput" 
                       name="profilePic" 
                       accept=".png,.webp,.jpeg,.jpg" 
                       required>
              </div>
              <div id="cropperContainer" style="display: none; max-width: 400px; margin: 20px auto;">
                <img id="imageToCrop">
              </div>
              <button type="submit" class="change-btn" id="saveProfilePicBtn" disabled>Save Changes</button>
            </form>
          </div>
        </div>
      </div>
    </section>
  </main>
</body>
<%- include("../../views/user/partials/footer") %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Modal functionality for name
  const editNameModal = document.getElementById("editNameModal");
  const editNameForm = document.getElementById("editNameForm");
  const editNameField = document.getElementById("editNameField");

  function openEditNameModal() {
    editNameModal.style.display = "block";
    editNameField.value = document.getElementById("displayName").textContent;
  }

  function closeEditNameModal() {
    editNameModal.style.display = "none";
  }

  editNameForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const newName = editNameField.value;

    try {
      const response = await fetch("/update-name", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name: newName }),
      });

      const data = await response.json();

      if (data.success) {
        document.getElementById("displayName").textContent = newName;
        closeEditNameModal();
        Swal.fire({
          icon: "success",
          title: "Success",
          text: "Name updated successfully!",
        });
      } else {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: data.message || "Failed to update name",
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "Something went wrong!",
      });
    }
  });


   // Modal functionality for password
   const changePasswordModal = document.getElementById("changePasswordModal");
  const changePasswordForm = document.getElementById("changePasswordForm");

  function openChangePasswordModal() {
    changePasswordModal.style.display = "block";
  }

  function closeChangePasswordModal() {
    changePasswordModal.style.display = "none";
    changePasswordForm.reset();
  }

  function togglePassword(inputId) {
    const input = document.getElementById(inputId);
    const icon = input.nextElementSibling.querySelector("i");
    
    if (input.type === "password") {
      input.type = "text";
      icon.classList.remove("fi-rs-eye");
      icon.classList.add("fi-rs-eye-crossed");
    } else {
      input.type = "password";
      icon.classList.remove("fi-rs-eye-crossed");
      icon.classList.add("fi-rs-eye");
    }
  }

  changePasswordForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const newPassword = document.getElementById("newPassword").value;
    const confirmPassword = document.getElementById("confirmPassword").value;

    if (newPassword !== confirmPassword) {
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "New password and confirm password do not match!",
      });
      return;
    }

    try {
      const response = await fetch("/change-password", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          newPassword,
        }),
      });

      const data = await response.json();

      if (data.success) {
        closeChangePasswordModal();
        Swal.fire({
          icon: "success",
          title: "Success",
          text: "Password changed successfully!",
        });
      } else {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: data.message || "Failed to change password",
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "Something went wrong!",
      });
    }
  });

  //Copy referal code functionality
  function copyReferralCode() {
    const referralCode = document.getElementById("referralCode").textContent;
    navigator.clipboard.writeText(referralCode).then(() => {
      Swal.fire({
        icon: "success",
        title: "Copied!",
        text: "Referral code copied to clipboard.",
        showConfirmButton: false,
        timer: 1500
      });
    }).catch((err) => {
      console.error("Failed to copy: ", err);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "Failed to copy referral code.",
      });
    });
  }

  //Profile pic functionality
  let cropper;

  function openProfilePicModal() {
    document.getElementById('profilePicModal').style.display = 'block';
  }

  function closeProfilePicModal() {
    document.getElementById('profilePicModal').style.display = 'none';
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
    document.getElementById('cropperContainer').style.display = 'none';
    document.getElementById('profilePicForm').reset();
    document.getElementById('saveProfilePicBtn').disabled = true;
  }

  document.getElementById('profilePicInput').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      const allowedTypes = ['image/png', 'image/webp', 'image/jpeg'];
      if (!allowedTypes.includes(file.type)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid File Type',
          text: 'Please upload only PNG, WEBP, or JPEG images'
        });
        this.value = '';
        return;
      }
      
      const reader = new FileReader();
      reader.onload = function(event) {
        const img = document.getElementById('imageToCrop');
        img.src = event.target.result;
        document.getElementById('cropperContainer').style.display = 'block';
        
        if (cropper) cropper.destroy();
        cropper = new Cropper(img, {
          aspectRatio: 1,
          viewMode: 1,
          crop: function() {
            document.getElementById('saveProfilePicBtn').disabled = false;
          }
        });
      };
      reader.readAsDataURL(file);
    }
  });

  document.getElementById('profilePicForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!cropper) return;

    const canvas = cropper.getCroppedCanvas({
      width: 200,
      height: 200
    });
    
    canvas.toBlob(async (blob) => {
      const formData = new FormData();
      formData.append('profilePic', blob, 'profile.jpg');

      try {
        const response = await fetch('/update-profile-pic', {
          method: 'POST',
          body: formData
        });
        
        const data = await response.json();
        if (data.success) {
          document.getElementById('profilePicDisplay').src = data.profilePicture;
          closeProfilePicModal();
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Profile picture updated successfully!'
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to update profile picture'
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong!'
        });
      }
    }, 'image/jpeg');
  });

  // Add profilePicModal to window.onclick
  if (event.target === profilePicModal) {
    closeProfilePicModal();
  }

  
  // Close modals when clicking outside
  window.onclick = function(event) {
    if (event.target === editNameModal) {
      closeEditNameModal();
    }
    if (event.target === editMobileModal) {
      closeEditMobileModal();
    }
    if (event.target === changePasswordModal) {
      closeChangePasswordModal();
    }
  };
</script>
