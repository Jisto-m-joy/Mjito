<%- include("../../views/user/partials/header") %>
<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/css/iziToast.min.css">

</head>
<!--=============== MAIN ===============-->
<main class="main">
  <!--=============== BREADCRUMB ===============-->
  <section class="breadcrumb">
    <ul class="breadcrumb__list flex container">
      <li><a href="/home" class="breadcrumb__link">Home</a></li>
      <li><span class="breadcrumb__link"></span>></li>
      <li><a href="/shop" class="breadcrumb__link">Shop</span></li>
      <li><span class="breadcrumb__link"></span>></li>
      <li><a href="/cart" class="breadcrumb__link">Cart</span></li>
    </ul>
  </section>

  <!--=============== CART ===============-->
  <section class="cart section--lg container">
    <div class="table__container">
      <table class="table">
        <thead>
          <tr>
            <th>Image</th>
            <th>Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Subtotal</th>
            <th>Remove</th>
          </tr>
        </thead>
        <tbody>
          <% if (cartItems && cartItems.length > 0) { %>
            <% cartItems.forEach(function(item) { %>
              <tr>
                <td>
                  <img
                    src="<%= item.productId.images[0] %>"
                    alt="<%= item.productId.name %>"
                    class="table__img"
                  />
                </td>
                <td>
                  <h3 class="table__title"><%= item.productId.name %></h3>
                  <!-- <p class="table__description"><%= item.productId.description %></p> -->
                </td>
                <td>
                  <span class="table__price">₹<%= item.price.toFixed(2) %></span>
                </td>
                <td>
                  <div class="quantity-calculator">
                    <button class="quantity-btn minus-btn" data-product-id="<%= item.productId._id %>">-</button>
                    <input 
                      type="number" 
                      value="<%= item.quantity %>" 
                      class="quantity-input" 
                      data-product-id="<%= item.productId._id %>"
                      readonly
                    />
                    <button class="quantity-btn plus-btn" data-product-id="<%= item.productId._id %>">+</button>
                  </div>
                </td>
                <td>
                  <span class="subtotal">₹<%= item.totalPrice.toFixed(2) %></span>
                </td>
                <td>
                  <button class="delete-btn" data-product-id="<%= item.productId._id %>">
                    <i class="fi fi-rs-trash table__trash"></i>
                  </button>
                </td>
              </tr>
            <% }); %>
          <% } else { %>
            <tr>
              <td colspan="6" class="text-center">Your cart is empty</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <div class="cart__actions">
      <a href="/shop" class="btn flex btn__md">
        <i class="fi-rs-shopping-bag"></i> Continue Shopping
      </a>
    </div>

    <div class="divider">
      <i class="fi fi-rs-fingerprint"></i>
    </div>

    <div class="cart__total">
      <h3 class="section__title">Cart Totals</h3>
      <table class="cart__total-table">
        <tr>
          <td><span class="cart__total-title">Cart Subtotal</span></td>
          <td><span class="cart__total-price">₹<%= subtotal %></span></td>
        </tr>
        <tr>
          <td><span class="cart__total-title">Shipping</span></td>
          <td><span class="cart__total-price">₹0.00</span></td>
        </tr>
        <tr>
          <td><span class="cart__total-title">Total</span></td>
          <td><span class="cart__total-price">₹<%= (parseFloat(subtotal)).toFixed(2) %></span></td>
        </tr>
      </table>
      <a href="/checkout" class="btn flex btn--md">
        <i class="fi fi-rs-box-alt"></i> Proceed To Checkout
      </a>
    </div>
    </div>
  </section>

  <!--=============== NEWSLETTER ===============-->
  <section class="newsletter section">
    <div class="newsletter__container container grid">
      <h3 class="newsletter__title flex">
        <img
          src="./assets/img/icon-email.svg"
          alt=""
          class="newsletter__icon"
        />
        Sign in to Newsletter
      </h3>
      <p class="newsletter__description">
        ...and receive $25 coupon for first shopping.
      </p>
      <form action="" class="newsletter__form">
        <input
          type="text"
          placeholder="Enter Your Email"
          class="newsletter__input"
        />
        <button type="submit" class="newsletter__btn">Subscribe</button>
      </form>
    </div>
  </section>
</main>

<%- include("../../views/user/partials/footer") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/izitoast/1.4.0/js/iziToast.min.js"></script>

<script>
async function updateQuantity(input) {
  const productId = input.dataset.productId;
  const quantity = parseInt(input.value);
  const row = input.closest('tr');
  
  try {
    const response = await fetch('/update-cart-quantity', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ productId, quantity })
    });
    
    const data = await response.json();
    if (data.success) {
      // Update the subtotal for this item
      row.querySelector('.subtotal').textContent = `₹${data.newTotal.toFixed(2)}`;
      
      // Update cart subtotal
      const subtotalElements = document.querySelectorAll('.cart__total-price');
      subtotalElements.forEach((element, index) => {
        if (index === 0) {
          element.textContent = `₹${data.cartSubtotal.toFixed(2)}`;
        } else if (index === 2) {
          const total = data.cartSubtotal + 10;
          element.textContent = `₹${total.toFixed(2)}`;
        }
      });
    } else {
      // Reset the quantity input to its previous value
      input.value = quantity - 1;
      // Show error message using iziToast
      iziToast.error({
        title: 'Error',
        message: data.message || 'Failed to update quantity',
        position: 'topRight'
      });
    }
  } catch (error) {
    console.error('Error updating quantity:', error);
  }
}
  
  async function removeFromCart(icon) {
    const productId = icon.dataset.productId;
    
    try {
      const response = await fetch(`/remove-from-cart/${productId}`, {
        method: 'DELETE'
      });
      
      const data = await response.json();
      if (data.success) {
        icon.closest('tr').remove();
        if (data.cartSubtotal !== undefined) {
          document.querySelector('.cart__total-price').textContent = `$${data.cartSubtotal.toFixed(2)}`;
        }
      }
    } catch (error) {
      console.error('Error removing item:', error);
    }
  }

  $('.delete-btn').on('click', function(e) {
  e.preventDefault(); // Prevent any default behavior
  const productId = $(this).data('product-id');
  const deleteButton = $(this);
  
  Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to remove this product from your cart?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, remove it!',
    cancelButtonText: 'No, keep it'
  }).then((result) => {
    if (result.isConfirmed) {
      $.ajax({
        url: '/remove-from-cart/' + productId,
        type: 'DELETE',
        success: function(response) {
          if (response.success) {
            // Remove the item row without page reload
            deleteButton.closest('tr').fadeOut(300, function() {
              $(this).remove();
              
              // If this was the last item, show empty cart message
              if ($('.table tbody tr').length === 0) {
                $('.table tbody').append('<tr><td colspan="6" class="text-center">Your cart is empty</td></tr>');
              }
              
              // Update cart total if provided in response
              if (response.cartSubtotal !== undefined) {
                $('.cart__total-price').text('$' + response.cartSubtotal.toFixed(2));
              }
            });
            
            // Show success message after row is removed
            Swal.fire({
              title: 'Removed!',
              text: 'The product has been removed from your cart.',
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            });
          } else {
            Swal.fire('Error!', response.message || 'Failed to remove product', 'error');
          }
        },
        error: function() {
          Swal.fire('Error!', 'An error occurred while removing the product.', 'error');
        }
      });
    }
  });
});


document.querySelectorAll('.quantity-input').forEach(input => {
  input.addEventListener('change', async function() {
    const quantity = parseInt(this.value);
    // Ensure quantity is at least 1
    if (quantity < 1) {
      this.value = 1;
      return;
    }
    await updateQuantity(this);
  });
});

document.querySelectorAll('.plus-btn').forEach(button => {
  button.addEventListener('click', function() {
    const input = this.previousElementSibling;
    const quantity = parseInt(input.value);
    const plusBtn = this;
    const minusBtn = this.previousElementSibling.previousElementSibling;

    if (quantity < 10) {
      input.value = quantity + 1;
      if (quantity + 1 === 10) {
        plusBtn.disabled = true;
      }
      minusBtn.disabled = false;
      updateQuantity(input);
    }
  });
});

document.querySelectorAll('.minus-btn').forEach(button => {
  button.addEventListener('click', function() {
    const input = this.nextElementSibling;
    const quantity = parseInt(input.value);
    const plusBtn = this.nextElementSibling.nextElementSibling;

    if (quantity > 1) {
      input.value = quantity - 1;
      if (quantity - 1 < 10) {
        plusBtn.disabled = false;
      }
      updateQuantity(input);
    }
  });
});

async function updateQuantity(input) {
  const productId = input.dataset.productId;
  const quantity = parseInt(input.value);
  const row = input.closest('tr');
  
  try {
    const response = await fetch('/update-cart-quantity', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ productId, quantity })
    });
    
    const data = await response.json();
    if (data.success) {
      // Update the subtotal for this item
      row.querySelector('.subtotal').textContent = `₹${data.newTotal.toFixed(2)}`;
      
      // Update cart subtotal
      const subtotalElements = document.querySelectorAll('.cart__total-price');
      subtotalElements.forEach((element, index) => {
        if (index === 0) {
          // Update subtotal
          element.textContent = `₹${data.cartSubtotal.toFixed(2)}`;
        } else if (index === 2) {
          // Update total (subtotal + shipping)
          const total = data.cartSubtotal + 10; // Adding shipping cost
          element.textContent = `₹${total.toFixed(2)}`;
        }
      });
    }
  } catch (error) {
    console.error('Error updating quantity:', error);
  }
}
  </script>
