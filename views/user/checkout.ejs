<%- include("../../views/user/partials/header") %>
<head>
  <link rel="stylesheet" href="https://unpkg.com/izitoast/dist/css/iziToast.min.css">
    <style>
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
      background-color: #fefefe;
      margin: 15% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 600px;
      border-radius: 8px;
    }

    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }

    .close:hover {
      color: black;
    }

    .modal-coupons {
      max-height: 400px;
      overflow-y: auto;
      padding: 10px;
    }

    .coupon__card {
      cursor: pointer;
      transition: transform 0.2s;
    }

    .coupon__card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .success-message {
      color: green;
      padding: 5px;
      border-radius: 4px;
      margin-top: 5px;
    }

    .error-message {
      color: red;
      padding: 5px;
      border-radius: 4px;
      margin-top: 5px;
    }

    .show-more__btn {
      margin-top: 10px;
      width: 100%;
      background-color: #f0f0f0;
      border: 1px solid #ddd;
      color: black; /* Text color changed to black */
    }
  </style>
</head>

<!--=============== MAIN ===============-->
<main class="main">
  <!--=============== BREADCRUMB ===============-->
  <section class="breadcrumb">
    <ul class="breadcrumb__list flex container">
      <li><a href="/home" class="breadcrumb__link">Home</a></li>
      <li><span class="breadcrumb__link">></span></li>
      <li><a href="/shop" class="breadcrumb__link">Shop</a></li>
      <li><span class="breadcrumb__link">></span></li>
      <li><a href="/home" class="breadcrumb__link">Checkout</a></li>
    </ul>
  </section>

  <!--=============== CHECKOUT ===============-->
  <section class="checkout section--lg">
    <div class="checkout__container container grid">
      <div class="checkout__group">
        <h3 class="section__title">Select Delivery Address</h3>
        <div class="address__list grid">
          <% addresses.forEach((address, index) => { %>
          <div class="address__item">
            <input type="radio" name="address" id="address<%= index + 1 %>"
            value="<%= address._id %>" class="address__radio" <%= index === 0 ?
            'checked' : '' %>>
            <label for="address<%= index + 1 %>" class="address__label">
              <div class="address__details">
                <h4 class="address__name"><%= address.addressType %></h4>
                <p class="address__text"><%= address.fullName %></p>
                <p class="address__text"><%= address.address %></p>
                <p class="address__text">
                  <%= address.city %>, <%= address.state %> <%= address.pincode
                  %>
                </p>
                <p class="address__text">Phone: <%= address.phone %></p>
              </div>
            </label>
          </div>
          <% }); %>

          <a href="/user-address"
            ><button class="btn add__address-btn">
              <i class="fas fa-plus">Add New Address </i>
            </button></a
          >
        </div>

        <!-- Coupon Code Section -->
        <div class="checkout__group coupon-group">
          <div class="coupon__container">
            <h3 class="section__title">Apply Coupon</h3>
            <div class="coupon__input-group">
              <input
                type="text"
                id="couponInput"
                class="coupon__input"
                placeholder="Enter coupon code"
              />
              <button type="button" id="applyCouponBtn" class="btn coupon__btn">
                Apply
              </button>
            </div>
            <div id="couponMessage" class="coupon__message-container"></div>

            <!-- Applied Coupon Display -->
            <div id="appliedCouponSection" style="display: none;">
              <h4>Applied Coupon:</h4>
              <div class="applied__coupon">
                <span id="appliedCouponCode"></span>
                <button type="button" id="removeCouponBtn" class="btn remove-coupon__btn">
                  Remove
                </button>
              </div>
            </div>

            <!-- Available Coupons -->
            <div class="available__coupons">
              <h4>Available Coupons:</h4>
              <div id="couponsList">
                <% if (coupons.length > 0) { %>
                  <% coupons.slice(0, 2).forEach(coupon => { %>
                    <div class="coupon__card">
                      <div class="coupon__code">
                        <span><%= coupon.code %></span>
                        <button class="btn copy-coupon__btn" onclick="copyCouponCode('<%= coupon.code %>')">Copy</button>
                        <button class="btn apply-coupon__btn" onclick="applyCouponCode('<%= coupon.code %>')">Apply</button>
                      </div>
                      <div class="coupon__details">
                        <p><%= coupon.description || 'for mass sale' %></p>
                        <small>Expires on: <%= coupon.expireOn.toLocaleDateString() %></small>
                      </div>
                    </div>
                  <% }); %>
                <% } else { %>
                  <p>No coupons available</p>
                <% } %>
              </div>
              <% if (coupons.length > 2) { %>
                <button id="showMoreCoupons" class="btn show-more__btn">
                  Show More Coupons
                </button>
              <% } %>
            </div>
          </div>
        </div>
      </div>

      <!-- Cart totals  -->
      <div class="checkout__group">
        <h3 class="section__title">Cart Totals</h3>
        <table class="order__table">
          <thead>
            <tr>
              <th colspan="2">Products</th>
              <th>Total</th>
            </tr>
          </thead>

          <tbody>
            <% cartItems.forEach(item => { %>
            <tr>
              <td>
                <img
                  src="<%= item.productId.images[0] %>"
                  alt=""
                  class="order__img"
                />
              </td>
              <td>
                <h3 class="table__title"><%= item.productId.name %></h3>
                <p class="table__quantity">x <%= item.quantity %></p>
              </td>
              <td>
                <span class="table__price"
                  >₹<%= item.totalPrice.toFixed(2) %></span
                >
              </td>
            </tr>
            <% }); %>

            <tr>
              <td><span class="order__subtitle">Subtotal</span></td>
              <td colspan="2">
                  <span class="table__price">₹<%= subtotal %></span>
              </td>
          </tr>
          <tr>
              <td><span class="order__subtitle">Shipping</span></td>
              <td colspan="2">
                  <span class="table__price">Free Shipping</span>
              </td>
          </tr>
          <% if (discount && discount > 0) { %>
          <tr id="coupon-discount-row">
              <td><span class="order__subtitle">Coupon Discount</span></td>
              <td colspan="2">
                  <span class="table__price coupon-discount">-₹<%= discount %></span>
              </td>
          </tr>
          <% } else { %>
          <tr id="coupon-discount-row" style="display: none">
              <td><span class="order__subtitle">Coupon Discount</span></td>
              <td colspan="2">
                  <span class="table__price coupon-discount">-₹0</span>
              </td>
          </tr>
          <% } %>
          <tr>
              <td><span class="order__subtitle">Total</span></td>
              <td colspan="2">
                  <span class="order__grand-total">₹<%= finalAmount || subtotal %></span>
              </td>
          </tr>
          </tbody>
        </table>
        <form action="/place-order" method="POST">
          <input
            type="hidden"
            name="addressId"
            id="selectedAddressId"
            value=""
          />
          <div class="payment__methods">
            <h3 class="checkout__title payment__title">Payment</h3>
            <div class="payment__option flex">
              <input
                type="radio"
                name="paymentMethod"
                id="l1"
                value="wallet"
                class="payment__input"
              />
              <label for="l1" class="payment__label">Wallet</label>
            </div>
            <div class="payment__option flex">
              <input
                type="radio"
                name="paymentMethod"
                id="l2"
                value="cod"
                class="payment__input"  
              />
              <label for="l2" class="payment__label">Cash on delivery</label>
            </div>
            <div class="payment__option flex">
              <input
                type="radio"
                name="paymentMethod"
                id="l3"
                value="razorpay"
                class="payment__input"
              />
              <label for="l3" class="payment__label">Razorpay</label>
            </div>
          </div>
          <button type="submit" class="btn place-order__btn">
            Place Order
          </button>
        </form>
      </div>
    </div>
  </section>

<!-- Coupon Modal -->
<div id="couponModal" class="modal">
      <div class="modal-content">
        <span class="close">×</span>
        <h2>Available Coupons</h2>
        <div class="modal-coupons" id="modalCouponsList">
          <% coupons.forEach(coupon => { %>
            <div class="coupon__card">
              <div class="coupon__code">
                <span><%= coupon.code %></span>
                <button class="btn copy-coupon__btn" onclick="copyCouponCode('<%= coupon.code %>')">Copy</button>
                <button class="btn apply-coupon__btn" onclick="applyCouponCode('<%= coupon.code %>')">Apply</button>
              </div>
              <div class="coupon__details">
                <p><%= coupon.description || 'for mass sale' %></p>
                <small>Expires on: <%= coupon.expireOn.toLocaleDateString() %></small>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
    </div>
  </div>

  <!--=============== NEWSLETTER ===============-->
  <section class="newsletter section">
    <div class="newsletter__container container grid">
      <h3 class="newsletter__title flex">
        <img
          src="./assets/img/icon-email.svg"
          alt=""
          class="newsletter__icon"
        />
        Sign in to Newsletter
      </h3>
      <p class="newsletter__description">
        ...and receive ₹25 coupon for first shopping.
      </p>
      <form action="" class="newsletter__form">
        <input
          type="text"
          placeholder="Enter Your Email"
          class="newsletter__input"
        />
        <button type="submit" class="newsletter__btn">Subscribe</button>
      </form>
    </div>
  </section>
</main>
<%- include("../../views/user/partials/footer") %>
<script src="https://unpkg.com/izitoast/dist/js/iziToast.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {

    const form = document.querySelector('form[action="/place-order"]');
    if (!form) {
      console.error("Form not found!");
      return;
    }
    console.log("Form found:", form);

    const placeOrderBtn = document.querySelector('.place-order__btn');
    if (!placeOrderBtn) {
      console.error("Place Order button not found!");
      return;
    }

    let walletError = document.createElement('div');
    walletError.className = 'error-message wallet-error';
    walletError.style.color = 'red';
    walletError.style.marginTop = '5px';
    const walletPaymentOption = document.querySelector('label[for="l1"]').parentNode;
    walletPaymentOption.appendChild(walletError);

    const firstAddressRadio = document.querySelector('input[name="address"]');
    const selectedAddressInput = document.getElementById("selectedAddressId");
    if (firstAddressRadio) {
      selectedAddressInput.value = firstAddressRadio.value;
      console.log("Initial addressId set to:", selectedAddressInput.value);
    } else {
      console.warn("No address radio buttons found!");
    }

    document.querySelectorAll('input[name="address"]').forEach((radio) => {
      radio.addEventListener("change", function () {
        selectedAddressInput.value = this.value;
        console.log("Address changed, new addressId:", selectedAddressInput.value);
      });
    });

    form.addEventListener('submit', function (e) {
      e.preventDefault();
      console.log("Form submission intercepted");

      const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
      const addressId = selectedAddressInput.value;
      const couponCode = document.querySelector('input[name="couponCode"]')?.value || '';

      if (!paymentMethod) {
        iziToast.error({
          title: 'Error',
          message: 'Please select a payment method',
          position: 'topRight'
        });
        return;
      }

      if (!addressId) {
        iziToast.error({
          title: 'Error',
          message: 'Please select a delivery address',
          position: 'topRight'
        });
        return;
      }

      console.log("Submitting with paymentMethod:", paymentMethod, "addressId:", addressId);

      if (paymentMethod === 'wallet') {
        checkWalletBalance().then(() => {
          if (!placeOrderBtn.disabled) {
            submitOrder(paymentMethod, addressId, couponCode);
          }
        });
      } else {
        submitOrder(paymentMethod, addressId, couponCode);
      }
    });

    function submitOrder(paymentMethod, addressId, couponCode = appliedCoupon) {
      const formData = { paymentMethod, addressId, couponCode: couponCode || '' };
      console.log("Submitting order with data:", formData);

      fetch('/place-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      })
      .then(response => {
        console.log('Raw response:', response);
        if (!response.ok) {
          return response.json().then(errorData => {
            console.log('Error data from server:', errorData);
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('Parsed response data:', data);
        if (data.success) {
          if (paymentMethod === 'razorpay') {
            openRazorpayModal(data, addressId, couponCode);
          } else {
            console.log('Order placed successfully, redirecting...');
            window.location.href = '/order-placed';
          }
        } else {
          console.warn('Success is false, showing error:', data.error);
          iziToast.error({
            title: 'Error',
            message: data.error || 'Failed to place order',
            position: 'topRight'
          });
        }
      })
      .catch(error => {
        console.error('Fetch error caught:', error);
        iziToast.error({
          title: 'Error',
          message: error.message,
          position: 'topRight'
        });
        console.log('iziToast error displayed:', error.message);
      });
    }

    function openRazorpayModal(data, addressId, couponCode) {
      const options = {
        key: data.keyId,
        amount: data.amount,
        currency: "INR",
        name: "GoalZone",
        description: "Order Payment",
        order_id: data.order.id,
        handler: function (response) {
          console.log('Payment successful:', response);
          verifyPayment(response, addressId, couponCode);
        },
        prefill: {
          name: "",
          email: "",
          contact: ""
        },
        theme: {
          color: "#3399cc"
        }
      };

      console.log('Opening Razorpay with options:', options);
      const rzp = new Razorpay(options);
      rzp.on('payment.failed', function (response) {
        console.error('Payment failed:', response.error);
        iziToast.error({
          title: 'Error',
          message: 'Payment failed: ' + response.error.description,
          position: 'topRight'
        });
      });
      rzp.open();
    }

    function verifyPayment(response, addressId, couponCode) {
      fetch('/verify-razorpay', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          razorpay_payment_id: response.razorpay_payment_id,
          razorpay_order_id: response.razorpay_order_id,
          razorpay_signature: response.razorpay_signature,
          addressId,
          couponCode
        })
      })
      .then(resp => resp.json())
      .then(result => {
        console.log('Verification response:', result);
        if (result.success) {
          window.location.href = result.redirect;
        } else {
          iziToast.error({
            title: 'Error',
            message: result.error || 'Payment verification failed',
            position: 'topRight'
          });
        }
      })
      .catch(error => {
        console.error('Verification error:', error);
        iziToast.error({
          title: 'Error',
          message: 'Error verifying payment. Please contact support.',
          position: 'topRight'
        });
      });
    }

    async function checkWalletBalance() {
      try {
        const totalAmount = parseFloat(document.querySelector('.order__grand-total').textContent.replace('₹', ''));
        const response = await fetch('/wallet-balance');
        const data = await response.json();
        
        if (data.success && data.balance < totalAmount) {
          walletError.textContent = `Insufficient balance: ₹${data.balance.toFixed(2)}. You need ₹${totalAmount.toFixed(2)}.`;
          placeOrderBtn.disabled = true;
        } else {
          walletError.textContent = '';
          placeOrderBtn.disabled = false;
        }
      } catch (error) {
        console.error('Error checking wallet balance:', error);
      }
    }

    const walletRadio = document.querySelector('input[value="wallet"]');
    if (walletRadio && walletRadio.checked) {
      checkWalletBalance();
    }

    walletRadio.addEventListener('change', async function() {
      if (this.checked) {
        await checkWalletBalance();
      } else {
        walletError.textContent = '';
        placeOrderBtn.disabled = false;
      }
    });

    let appliedCoupon = null;

    // Apply Coupon
    document.getElementById("applyCouponBtn").addEventListener("click", async function () {
      const couponCode = document.getElementById("couponInput").value;
      const messageContainer = document.getElementById("couponMessage");

      try {
        const response = await fetch("/apply-coupon", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ couponCode })
        });

        const data = await response.json();

        if (data.success) {
          messageContainer.innerHTML = `<div class="success-message">Coupon applied! Discount: ₹${data.discount}</div>`;
          const discountRow = document.getElementById("coupon-discount-row");
          discountRow.style.display = "table-row";
          document.querySelector(".coupon-discount").textContent = `-₹${data.discount}`;
          document.querySelector(".order__grand-total").textContent = `₹${data.finalAmount}`;

          const existingInput = form.querySelector('input[name="couponCode"]');
          if (existingInput) existingInput.remove();
          
          let hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.name = "couponCode";
          hiddenInput.value = couponCode;
          form.appendChild(hiddenInput);

          appliedCoupon = couponCode;

          // Show applied coupon
          document.getElementById("appliedCouponSection").style.display = "block";
          document.getElementById("appliedCouponCode").textContent = couponCode;
        } else {
          messageContainer.innerHTML = `<div class="error-message">${data.error}</div>`;
          appliedCoupon = null;
          document.getElementById("appliedCouponSection").style.display = "none";
        }
      } catch (error) {
        messageContainer.innerHTML = '<div class="error-message">Failed to apply coupon</div>';
        appliedCoupon = null;
        document.getElementById("appliedCouponSection").style.display = "none";
      }
    });

    // Remove Coupon
    document.getElementById("removeCouponBtn").addEventListener("click", async function () {
      try {
        const response = await fetch("/remove-coupon", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ couponCode: appliedCoupon })
        });

        const data = await response.json();

        if (data.success) {
          appliedCoupon = null;
          document.getElementById("appliedCouponSection").style.display = "none";
          document.getElementById("couponInput").value = "";
          document.getElementById("couponMessage").innerHTML = `<div class="success-message">Coupon removed!</div>`;

          const discountRow = document.getElementById("coupon-discount-row");
          discountRow.style.display = "none";
          document.querySelector(".coupon-discount").textContent = `-₹0`;
          document.querySelector(".order__grand-total").textContent = `₹${data.originalAmount}`;

          const existingInput = form.querySelector('input[name="couponCode"]');
          if (existingInput) existingInput.remove();
        } else {
          document.getElementById("couponMessage").innerHTML = `<div class="error-message">${data.error}</div>`;
        }
      } catch (error) {
        document.getElementById("couponMessage").innerHTML = '<div class="error-message">Failed to remove coupon</div>';
      }
    });

    const modal = document.getElementById("couponModal");
    const showMoreBtn = document.getElementById("showMoreCoupons");
    const closeBtn = document.querySelector(".close");

    if (showMoreBtn) {
      showMoreBtn.addEventListener("click", function () {
        modal.style.display = "block";
      });
    }

    if (closeBtn) {
      closeBtn.addEventListener("click", function () {
        modal.style.display = "none";
      });
    }

    window.addEventListener("click", function (event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    });

    window.applyCouponCode = function(code) {
      document.getElementById("couponInput").value = code;
      document.getElementById("applyCouponBtn").click();
      if (document.getElementById("couponModal").style.display === "block") {
        document.getElementById("couponModal").style.display = "none";
      }
    };

    window.copyCouponCode = function(code) {
      navigator.clipboard.writeText(code).then(() => {
        iziToast.success({
          title: 'Copied!',
          message: `Coupon code ${code} copied to clipboard`,
          position: 'topRight'
        });
      }).catch(err => {
        iziToast.error({
          title: 'Error',
          message: 'Failed to copy coupon code',
          position: 'topRight'
        });
      });
    };
  });
</script>