<%- include("../../views/user/partials/header") %>
<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/css/elevatezoom.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-0evHe/X+b0y8Ahr7T2v8B7eHq9e1E8ICpc5bQkPYRr1v8Lleif9H4z6G0L1d6v8B" crossorigin="anonymous">
<style>
  .rate__product .fi {
    color: #ccc; /* Default color */
    cursor: pointer;
  }
  .rate__product .fi.gold {
    color: gold; /* Selected color */
  }
  .offer__percentage {
    color: #ff0000;
    font-size: 0.8em;
    margin-left: 10px;
  }
</style>
</head>

<!--=============== MAIN ===============-->
<main class="main">
    <!--=============== BREADCRUMB ===============-->
    <section class="breadcrumb">
      <ul class="breadcrumb__list flex container">
        <li><a href="/home" class="breadcrumb__link">Home</a></li>
        <li><span class="breadcrumb__link">></span></li>
        <li><a href="/shop" class="breadcrumb__link">Shop</a></li>
        <li><span class="breadcrumb__link">></span></li>
        <li><span class="breadcrumb__link"><%= product.name %></span></li>
      </ul>
    </section>

    <!--=============== DETAILS ===============-->
    <section class="details section--lg">
      <div class="details__container container grid">
        <div class="details__group">
          <img
            id="zoom_01"
            src="<%= product.images[0] %>"
            data-zoom-image="<%= product.images[0].replace(/\\/g, '/') %>"
            alt="product image"
            class="details__img"
          />
          <div class="details__small-images grid">
            <img
              src="<%= product.images[0] %>"
              data-zoom-image="<%= product.images[0].replace(/\\/g, '/') %>"
              alt="product image"
              class="details__small-img"
              onclick="changeImage(this)"
            />
            <img
              src="<%= product.images[1] %>"
              alt="product image"
              class="details__small-img"
              onclick="changeImage(this)"
            />
            <img
              src="<%= product.images[2] %>"
              alt="product image"
              class="details__small-img"
              onclick="changeImage(this)"
            />
            <img
              src="<%= product.images[3] %>"
              alt="product image"
              class="details__small-img"
              onclick="changeImage(this)"
            />
          </div>
        </div>
        <div class="details__group">
          <h3 class="details__title"><%= product.name %></h3>
          <p class="details__brand">Brand: <span><%= product.brand %></span></p>
          <div class="details__price flex">
            <% 
              let categoryOffer = category && category.categoryOffer || 0;
              let productOffer = product.productOffer ? product.offerPercentage : 0;
              let effectiveOffer = product.productOffer ? productOffer : categoryOffer;
              let originalSalesPrice = product.combos[0].salesPrice;
              let regularPrice = product.combos[0].regularPrice;
              let newSalesPrice = effectiveOffer > 0 ? originalSalesPrice * (1 - effectiveOffer / 100) : originalSalesPrice;
              newSalesPrice = Math.round(newSalesPrice * 100) / 100;
            %>
            <span class="new__price" id="salesPrice">₹<%= newSalesPrice.toFixed(2) %></span>
            <span class="old__price" id="regularPrice">₹<%= originalSalesPrice %></span>
            <% if (effectiveOffer > 0) { %>
              <span class="save__price">
                <%= effectiveOffer %>% Off 
                (<%= productOffer > 0 ? 'Product' : 'Category' %> Offer)
              </span>
            <% } %>
          </div>
          <p class="short__description">
            <%= product.description %>
          </p>
          <ul class="products__list">
            <li class="list__item flex">
              <i class="fi-rs-crown"></i> 1 Year <%= product.brand %> Brand Warranty
            </li>
            <li class="list__item flex">
              <i class="fi-rs-refresh"></i> 30 Days Return Policy
            </li>
            <li class="list__item flex">
              <i class="fi-rs-credit-card"></i> Cash on Delivery available
            </li>
          </ul>
          <!-- <div class="details__color flex">
            <span class="details__color-title">Color</span>
            <ul class="color__list">
              <li>
                <a
                  href="#"
                  class="color__link"
                  style="background-color: hsl(37, 100%, 65%)"
                ></a>
              </li>
            </ul>
          </div> -->
          <div class="details__size flex">
            <span class="details__size-title">Size</span>
            <ul class="size__list">
              <% product.combos.forEach(function(combo) { %>
                <li>
                  <a href="#" class="size__link" 
                     data-salesPrice="<%= combo.salesPrice %>" 
                     data-regularPrice="<%= combo.regularPrice %>" 
                     data-quantity="<%= combo.quantity %>">
                     <%= combo.size %>
                  </a>
                </li>
              <% }); %>
            </ul>
          </div>
          <div class="details__action">
            <div class="quantity-calculator">
              <button class="quantity-btn minus-btn">-</button>
              <input type="number" min="1" value="1" class="quantity-input" readonly>
              <button class="quantity-btn plus-btn">+</button>
            </div>
            <a href="#" class="btn btn--sm" id="addToCartBtn">Add To Cart</a>
            <a href="#" class="details__action-btn">
                <i class="fi fi-rs-heart"></i>
            </a>
        </div>
        <ul class="details__meta">
          <li class="meta__list flex">
            <span>Tags:</span><%= product.brand %>, <%= product.category.name %> , <%= product.name %>
          </li>
          <li class="meta__list flex">
            <span>Availability:</span>
            <span 
              id="availability" 
              style=<%= quantity === 0 ? 'color: red;' : '' %>
            >
              <%= quantity === 0 ? 'Out of stock' : quantity + ' Items in Stock' %>
            </span>
          </li>
        </ul>
        </div>
      </div>
    </section>

    <!--=============== DETAILS TAB ===============-->
    <section class="details__tab container">
      <div class="detail__tabs">
        <span class="detail__tab active-tab" data-target="#info">
          Additional Info
        </span>
        <span class="detail__tab" data-target="#reviews">Reviews</span>
      </div>
      <div class="details__tabs-content">
        <div class="details__tab-content active-tab" content id="info">
          <table class="info__table">
            <tr>
              <th>Product Name</th>
              <td><%= product.name %></td>
            </tr>
            <tr>
              <th>Brand</th>
              <td><%= product.brand %></td>
            </tr>
            <th>Category</th>
              <td><%= product.category.name %></td>
            </tr>
            <tr>
              <th>Available Sizes</th>
              <td>
                <% product.combos.forEach(function(combo, index) { %>
                  <%= combo.size %><%= index < product.combos.length - 1 ? ', ' : '' %>
                <% }); %>
              </td>
            </tr>
            <tr>
              <th>Stock Quantity</th>
              <td><%= product.combos[0].quantity %></td>
            </tr>
            <tr>
              <th>Regular Price</th>
              <td>₹<%= product.combos[0].regularPrice.toFixed(2) %></td>
            </tr>
            <tr>
              <th>Sales Price</th>
              <td>₹<%= product.combos[0].salesPrice.toFixed(2) %></td>
            </tr>
            <% if (product.offerPercentage > 0) { %>
            <tr>
              <th>Offer Percentage</th>
              <td><%= product.offerPercentage %>%</td>
            </tr>
            <% } %>
          </table>
        </div>
        <div class="details__tab-content" content id="reviews">
          <div class="reviews__container grid">
            <% if (reviews && reviews.length > 0) { %>
              <% reviews.forEach(function(review) { %>
                <div class="review__single">
                  <div>
                    <img
                      src="<%= review.userId.profilePicture %>"
                      alt=""
                      class="review__img"
                    />
                    <h4 class="review__title"><%= review.userId.name %></h4>
                  </div>
                  <div class="review__data">
                    <div class="review__rating">
                      <% for (let i = 0; i < review.rating; i++) { %>
                        <i class="fi fi-rs-star"></i>
                      <% } %>
                    </div>
                    <p class="review__description">
                      <%= review.description %>
                    </p>
                    <span class="review__date"><%= review.createdAt.toDateString() %></span>
                  </div>
                </div>
              <% }); %>
            <% } else { %>
              <p>No reviews yet. Be the first to review this product!</p>
            <% } %>
          </div>
          <div class="review__form">
            <h4 class="review__form-title">Add a review</h4>
            <div class="rate__product">
              <i class="fi fi-rs-star" data-rating="1"></i>
              <i class="fi fi-rs-star" data-rating="2"></i>
              <i class="fi fi-rs-star" data-rating="3"></i>
              <i class="fi fi-rs-star" data-rating="4"></i>
              <i class="fi fi-rs-star" data-rating="5"></i>
            </div>
            <form action="/submitReview" method="POST" class="form grid" id="reviewForm">
              <input type="hidden" name="productId" value="<%= product._id %>">
              <input type="hidden" name="rating" id="ratingInput">
              <textarea
                class="form__input textarea"
                placeholder="Write Comment"
                name="description"
                required
              ></textarea>
              <div class="form__btn">
                <button type="submit" class="btn">Submit Review</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>

    <!--=============== PRODUCTS ===============-->
    <section class="products container section--lg">
      <h3 class="section__title"><span>Related</span> Products</h3>
      <div class="products__container grid">
        <% relatedProducts.forEach(function(relatedProduct) { %>
        <div class="product__item">
          <div class="product__banner">
            <a href="/productDetails?id=<%= relatedProduct._id %>" class="product__images">
              <img
                src="<%= relatedProduct.images[0] %>"
                alt=""
                class="product__img default"
              />
              <img
                src="<%= relatedProduct.images[1] %>"
                alt=""
                class="product__img hover"
              />
            </a>
            <div class="product__actions">
              <a href="/productDetails?id=<%= relatedProduct._id %>" class="action__btn" aria-label="Quick View">
                <i class="fi fi-rs-eye"></i>
              </a>
              <a
              href="#"
              class="action__btn"
              aria-label="Add to Wishlist"
              data-product-id="<%= product._id %>"
            >
              <i class="fi fi-rs-heart"></i>
            </a>
              <a href="#" class="action__btn" aria-label="Compare">
                <i class="fi fi-rs-shuffle"></i>
              </a>
            </div>
            <div class="product__badge light-pink">Hot</div>
          </div>
          <div class="product__content">
            <span class="product__category"><%= relatedProduct.category.name %></span>
            <a href="/product-details?id=<%= relatedProduct._id %>">
              <h3 class="product__title"><%= relatedProduct.name %></h3>
            </a>
            <div class="product__rating">
              <i class="fi fi-rs-star"></i>
              <i class="fi fi-rs-star"></i>
              <i class="fi fi-rs-star"></i>
              <i class="fi fi-rs-star"></i>
              <i class="fi fi-rs-star"></i>
            </div>
            <div class="product__price flex">
              <% if (relatedProduct.offerPercentage > 0) { %>
                <span class="new__price">₹<%= relatedProduct.newSalesPrice.toFixed(2) %></span>
                <span class="old__price">₹<%= relatedProduct.originalSalesPrice %></span>
                <span class="offer__percentage">
                  (-<%= relatedProduct.offerPercentage %>%) 
                  <%= relatedProduct.appliedOfferType === 'product' ? 'Product' : 'Category' %> Offer
                </span>
              <% } else { %>
                <span class="new__price">₹<%= relatedProduct.combos[0].salesPrice %></span>
                <span class="old__price">₹<%= relatedProduct.combos[0].regularPrice %></span>
              <% } %>
            </div>
            <a
            href="#"
            class="action__btn cart__btn related-product-cart-btn"
            aria-label="Add To Cart"
            data-product-id="<%= relatedProduct._id %>"
            data-product-size="<%= relatedProduct.combos[0].size %>"
          >
            <i class="fi fi-rs-shopping-bag-add"></i>
          </a>
          </div>
        </div>
        <% }); %>
      </div>
    </section>

    <!--=============== NEWSLETTER ===============-->
    <section class="newsletter section">
      <div class="newsletter__container container grid">
        <h3 class="newsletter__title flex">
          <img
            src="./assets/img/icon-email.svg"
            alt=""
            class="newsletter__icon"
          />
          Sign in to Newsletter
        </h3>
        <p class="newsletter__description">
          <!-- ...and receive $25 coupon for first shopping. -->
        </p>
        <form action="" class="newsletter__form">
          <input
            type="text"
            placeholder="Enter Your Email"
            class="newsletter__input"
          />
          <button type="submit" class="newsletter__btn">Subscribe</button>
        </form>
      </div>
    </section>
  </main>


  <%-include("../../views/user/partials/footer")%>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>

   <!--=============== PRODUCT DETAILS JS ===============-->

  <script src="/assets/js/user/product-details.js"></script>
  <script>
document.addEventListener('DOMContentLoaded', function() {
    const stars = document.querySelectorAll('.rate__product .fi');
    const ratingInput = document.getElementById('ratingInput');
  
    stars.forEach(star => {
      star.addEventListener('click', function() {
        const rating = this.getAttribute('data-rating');
        ratingInput.value = rating;
        stars.forEach((s, index) => {
          if (index < rating) {
            s.classList.add('gold');
          } else {
            s.classList.remove('gold');
          }
        });
      });
    });
  
    document.getElementById('reviewForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const formData = new FormData(this);
  
      console.log('Form Data:', Object.fromEntries(formData.entries()));
  
      fetch('/submitReview', {
        method: 'POST',
        body: JSON.stringify(Object.fromEntries(formData.entries())),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      })
      .then(response => {
        if (!response.ok) {
          console.error('Server responded with a non-200 status code:', response.status, response.statusText);
          return response.json().then(data => {
            throw new Error(data.message || 'Network response was not ok');
          });
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          iziToast.success({
            title: 'Success',
            message: data.message,
            position: 'topRight'
          });
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          iziToast.error({
            title: 'Error',
            message: data.message || 'Failed to submit review',
            position: 'topRight'
          });
        }
      })
      .catch(error => {
        console.error('Fetch error:', error);
        iziToast.error({
          title: 'Error',
          message: error.message || 'Failed to submit review',
          position: 'topRight'
        });
      });
    });
  });


    document.addEventListener('DOMContentLoaded', function() {
    const addToCartBtn = document.querySelector('#addToCartBtn');
    const quantityInput = document.querySelector('.quantity-input');
    const productId = '<%= product._id %>';
    
    addToCartBtn.addEventListener('click', function(event) {
        event.preventDefault();
        
        // Get the active size element
        const activeSizeElement = document.querySelector('.size__link.size-active');
        if (!activeSizeElement) {
            iziToast.error({
                title: 'Error',
                message: 'Please select a size',
                position: 'topRight'
            });
            return;
        }

        // Update how we get the size value
        const selectedCombo = {
            size: activeSizeElement.textContent.trim(), // Add trim() here
            salesPrice: activeSizeElement.getAttribute('data-salesPrice'),
            regularPrice: activeSizeElement.getAttribute('data-regularPrice')
        };
        
        const quantity = parseInt(quantityInput.value);
        if (quantity > 10) {
            iziToast.error({
                title: 'Error',
                message: 'Maximum quantity limit is 10',
                position: 'topRight'
            });
            return;
        }        
        
        fetch('/add-to-cart', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
              productId, 
              quantity, 
              selectedCombo 
          })
      })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;  // Handle redirect to login
                return;
            }
            return response.json();
        })
        .then(data => {
            if (data && data.success) {
                iziToast.success({
                    title: 'Success',
                    message: data.message,
                    position: 'topRight'
                });
            } else if (data) {
                iziToast.error({
                    title: 'Error',
                    message: data.message || 'Failed to add product to cart',
                    position: 'topRight'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            iziToast.error({
                title: 'Error',
                message: 'Please login to add items to cart',
                position: 'topRight'
            });
        });
    });
});

document.addEventListener('DOMContentLoaded', function() {
    const relatedProductCartButtons = document.querySelectorAll('.related-product-cart-btn');
    
    relatedProductCartButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            
            const productId = this.getAttribute('data-product-id');
            
            fetch('/add-to-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    productId, 
                    quantity: 1,
                    selectedCombo: {
                        size: this.getAttribute('data-product-size')
                    }
                })
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }
                return response.json();
            })
            .then(data => {
                if (data && data.success) {
                    iziToast.success({
                        title: 'Success',
                        message: data.message,
                        position: 'topRight'
                    });
                } else if (data) {
                    iziToast.error({
                        title: 'Error',
                        message: data.message || 'Failed to add product to cart',
                        position: 'topRight'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                iziToast.error({
                    title: 'Error',
                    message: 'Please login to add items to cart',
                    position: 'topRight'
                });
            });
        });
    });
});

document.addEventListener('DOMContentLoaded', function() {
  const sizeLinks = document.querySelectorAll('.size__link');
  const salesPriceElement = document.getElementById('salesPrice');
  const regularPriceElement = document.getElementById('regularPrice');
  const availabilityElement = document.getElementById('availability');

  sizeLinks.forEach(link => {
    link.addEventListener('click', function(event) {
      event.preventDefault();
      
      const salesPrice = parseFloat(this.getAttribute('data-salesPrice'));
      const regularPrice = parseFloat(this.getAttribute('data-regularPrice'));
      const quantity = this.getAttribute('data-quantity');
      const offerPercentage = '<%= offerPercentage %>'; // Get from server-side
      
      let newSalesPrice = salesPrice;
      if (offerPercentage > 0) {
        newSalesPrice = salesPrice * (1 - offerPercentage / 100);
        newSalesPrice = Math.round(newSalesPrice * 100) / 100;
      }

      salesPriceElement.textContent = `₹${newSalesPrice}`;
      regularPriceElement.textContent = `₹${salesPrice}`; // Show original sales price as regular
      availabilityElement.textContent = quantity === '0' ? 'Out of stock' : `${quantity} Items in Stock`;
      availabilityElement.style.color = quantity === '0' ? 'red' : '';

      sizeLinks.forEach(l => l.classList.remove('size-active'));
      this.classList.add('size-active');
    });
  });
});

    document.addEventListener('DOMContentLoaded', function() {
  const minusBtn = document.querySelector('.minus-btn');
  const plusBtn = document.querySelector('.plus-btn');
  const quantityInput = document.querySelector('.quantity-input');

  minusBtn.addEventListener('click', function() {
    const currentQuantity = parseInt(quantityInput.value);
    if (currentQuantity > 1) {
      quantityInput.value = currentQuantity - 1;
      plusBtn.disabled = false; // Re-enable plus button
    }
  });

  plusBtn.addEventListener('click', function() {
    const currentQuantity = parseInt(quantityInput.value);
    if (currentQuantity < 10) {
      quantityInput.value = currentQuantity + 1;
      if (currentQuantity + 1 === 10) {
        plusBtn.disabled = true; // Disable plus button when quantity reaches 10
      }
    }
  });
});

document.addEventListener('DOMContentLoaded', function() {
  const sizeLinks = document.querySelectorAll('.size__link');
  const salesPriceElement = document.getElementById('salesPrice');
  const regularPriceElement = document.getElementById('regularPrice');
  const availabilityElement = document.getElementById('availability');

  // Get offer details from server-side
  const categoryOffer = '<%= category && category.categoryOffer || 0 %>';
  const productOffer =' <%= product.productOffer ? product.offerPercentage : 0 %>';
  const effectiveOffer = productOffer > 0 ? productOffer : categoryOffer;

  sizeLinks.forEach(link => {
    link.addEventListener('click', function(event) {
      event.preventDefault();
      
      const salesPrice = parseFloat(this.getAttribute('data-salesPrice'));
      const regularPrice = parseFloat(this.getAttribute('data-regularPrice'));
      const quantity = this.getAttribute('data-quantity');

      let newSalesPrice = salesPrice;
      if (effectiveOffer > 0) {
        newSalesPrice = salesPrice * (1 - effectiveOffer / 100);
        newSalesPrice = Math.round(newSalesPrice * 100) / 100;
      }

      salesPriceElement.textContent = `₹${newSalesPrice.toFixed(2)}`;
      regularPriceElement.textContent = `₹${salesPrice}`; // Show original sales price as regular
      availabilityElement.textContent = quantity === '0' ? 'Out of stock' : `${quantity} Items in Stock`;
      availabilityElement.style.color = quantity === '0' ? 'red' : '';

      sizeLinks.forEach(l => l.classList.remove('size-active'));
      this.classList.add('size-active');
    });
  });
});

//Wishlist functionality

document.addEventListener('DOMContentLoaded', function() {
    // Helper function to handle wishlist actions
    async function handleWishlist(event, heartIcon) {
        event.preventDefault();
        
        try {
            const productId = heartIcon.closest('a').dataset.productId;
            const isInWishlist = heartIcon.style.color === 'rgb(0, 178, 7)'; // Check if product is already in wishlist
            
            const response = await fetch(`/wishlist/${isInWishlist ? 'remove' : 'add'}/${productId}`, {
                method: isInWishlist ? 'DELETE' : 'POST',
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Toggle heart icon color
                heartIcon.style.color = isInWishlist ? '' : '#00B207';
                
                // Show success message
                iziToast.success({
                    title: 'Success',
                    message: isInWishlist ? 'Product removed from wishlist' : 'Product added to wishlist',
                    position: 'topRight'
                });
            } else {
                throw new Error(data.error || 'Operation failed');
            }
        } catch (error) {
            iziToast.error({
                title: 'Error',
                message: error.message || 'Failed to update wishlist',
                position: 'topRight'
            });
        }
    }

    // Add click event listeners to all wishlist icons
    document.querySelectorAll('.action__btn[aria-label="Add to Wishlist"]').forEach(async btn => {
        const heartIcon = btn.querySelector('.fi-rs-heart');
        const productId = btn.dataset.productId;
        
        // Check initial wishlist status
        try {
            const response = await fetch(`/wishlist/check-status?productId=${productId}`);
            const data = await response.json();
            
            if (data.success && data.inWishlist) {
                heartIcon.style.color = '#00B207';
            }
        } catch (error) {
            console.error('Failed to check wishlist status:', error);
        }
        
        btn.addEventListener('click', (e) => handleWishlist(e, heartIcon));
    });
});
  </script>
  
