<%- include("../../views/user/partials/header") %>
<head>  
  <!-- iziToast CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">
</head>

<!--=============== MAIN ===============-->
<main class="main">
  <!--=============== BREADCRUMB ===============-->
  <section class="breadcrumb">
    <ul class="breadcrumb__list flex container">
      <li><a href="/home" class="breadcrumb__link">Home</a></li>
      <li><span class="breadcrumb__link">></span></li>
      <li><span class="breadcrumb__link">Shop</span></li>
    </ul>
  </section>

  <div class="container flex">
    <!--=============== FILTER BAR ===============-->
    <aside class="filter-bar">
      <form action="/shop" method="GET" class="filter-form">
        <!-- Search Option -->
        <div class="filter-group">
          <label for="search">Search</label>
          <input 
          type="text" 
          id="search" 
          name="search" 
          placeholder="Search products" 
          value="<%= typeof search !== 'undefined' ? search : '' %>"
          autocomplete="off"
        >
        </div>
        
        <!-- Category Selection -->
        <div class="filter-group">
          <label for="category">Category</label>
          <select id="category" name="category">
            <option value="">All Categories</option>
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>" 
                <%= query.category === category._id.toString() ? 'selected' : '' %>>
                <%= category.name %>
              </option>
            <% }) %>
          </select>
        </div>
        
        <!-- Brand Selection -->
        <div class="filter-group">
          <label for="brand">Brand</label>
          <select id="brand" name="brand">
            <option value="">All Brands</option>
            <% brands.forEach(brand => { %>
              <option value="<%= brand.brandName %>" 
                <%= query.brand === brand.brandName ? 'selected' : '' %>>
                <%= brand.brandName %>
              </option>
            <% }) %>
          </select>
        </div>
        
        <!-- Price Range Selection -->
        <div class="filter-group">
          <label for="price">Price Range</label>
          <select id="price" name="price">
            <option value="">All Prices</option>
            <option value="0-1000" <%= query.price === '0-1000' ? 'selected' : '' %>>₹0 - ₹1000</option>
            <option value="1000-5000" <%= query.price === '1000-5000' ? 'selected' : '' %>>₹1000 - ₹5000</option>
            <option value="5000-10000" <%= query.price === '5000-10000' ? 'selected' : '' %>>₹5000 - ₹10000</option>
            <option value="10000-20000" <%= query.price === '10000-20000' ? 'selected' : '' %>>₹10000 - ₹20000</option>
            <option value="20000-30000" <%= query.price === '20000-30000' ? 'selected' : '' %>>₹20000 - ₹30000</option>
            <option value="30000+" <%= query.price === '30000+' ? 'selected' : '' %>>₹30000+</option>
          </select>
        </div>
        
        <!-- Size Selection -->
        <div class="filter-group">
          <label for="size">Size</label>
          <select id="size" name="size">
            <option value="">All Sizes</option>
            <% sizes.forEach(size => { %>
              <option value="<%= size %>" 
                <%= query.size === size.toString() ? 'selected' : '' %>>
                <%= size %>
              </option>
            <% }) %>
          </select>
        </div>
        
        <!-- Color Selection -->
        <div class="filter-group">
          <label for="color">Color</label>
          <select id="color" name="color">
            <option value="">All Colors</option>
            <% colors.forEach(color => { %>
              <option value="<%= color %>" 
                <%= query.color === color ? 'selected' : '' %>>
                <%= color %>
              </option>
            <% }) %>
          </select>
        </div>
        
        <!-- Sorting Option -->
        <div class="filter-group">
          <label for="sort">Sort By</label>
          <select id="sort" name="sort">
            <option value="price-asc" <%= query.sort === 'price-asc' ? 'selected' : '' %>>Price: Low to High</option>
            <option value="price-desc" <%= query.sort === 'price-desc' ? 'selected' : '' %>>Price: High to Low</option>
            <option value="name-asc" <%= query.sort === 'name-asc' ? 'selected' : '' %>>Alphabetical: A-Z</option>
            <option value="name-desc" <%= query.sort === 'name-desc' ? 'selected' : '' %>>Alphabetical: Z-A</option>
            <option value="new-arrivals" <%= query.sort === 'new-arrivals' ? 'selected' : '' %>>New Arrivals</option>
            <option value="old-arrivals" <%= query.sort === 'old-arrivals' ? 'selected' : '' %>>Old Arrivals</option>
          </select>
        </div>
        
        <button type="submit" class="filter-btn">Apply Filters</button>
        <button type="reset" class="filter-btn clear-btn" id="clear-filters">Clear Filters</button>
      </form>
    </aside>
    
    <!--=============== SHOP CONTENT ===============-->
    <div class="shop-content">
      <!--=============== PRODUCTS ===============-->
      <section class="products container section--lg">
        <p class="total__products">We found <span><%= products.length %></span> items for you!</p>
        <div class="products__container grid">

          <% for(let i = 0; i < products.length ; i++){ %>

          <div class="product__item">
            <div class="product__banner">
              <a href="/productDetails?id=<%= products[i]._id %>" class="product__images">
                <img
                  src="<%= products[i].images[0] %>"
                  alt="<%= products[i].name %>"
                  class="product__img default"
                />
                <img
                  src="<%= products[i].images[1] %>"
                  alt="<%= products[i].name %>"
                  class="product__img hover"
                />
              </a>
              <div class="product__actions">
                <a href="/productDetails?id=<%= products[i]._id %>" class="action__btn" aria-label="Quick View">
                  <i class="fi fi-rs-eye"></i>
                </a>
                <a
                href="#"
                class="action__btn"
                aria-label="Add to Wishlist"
                data-product-id="<%= products[i]._id %>"
              >
                <i class="fi fi-rs-heart"></i>
              </a>
                <a href="#" class="action__btn" aria-label="Compare">
                  <i class="fi fi-rs-shuffle"></i>
                </a>
              </div>
              <div class="product__badge light-green">Hot</div>
            </div>
            <div class="product__content">
              <span class="product__category"><%= products[i].brand %></span>
              <a href="details.html">
                <h3 class="product__title"><%= products[i].name %></h3>
              </a>
              <div class="product__rating">
                <i class="fi fi-rs-star"></i>
                <i class="fi fi-rs-star"></i>
                <i class="fi fi-rs-star"></i>
                <i class="fi fi-rs-star"></i>
                <i class="fi fi-rs-star"></i>
              </div>
              <div class="product__price flex">
                <span class="new__price">₹<%= products[i].combos[0].salesPrice %></span>
                <span class="old__price">₹<%= products[i].combos[0].regularPrice %></span>
              </div>
              <a
              href="#"
              class="action__btn cart__btn"
              aria-label="Add To Cart"
              data-combo-size="<%= products[i].combos[0].size %>"
            >
              <i class="fi fi-rs-shopping-bag-add"></i>
            </a>
            </div>
          </div>
          <% } %>
        </div>
          
        <ul class="pagination">
          <% for (let i = 1; i <= totalPages; i++) { %>
            <% const pageQuery = {...query, page: i} %>
            <a 
              href="?<%= new URLSearchParams(pageQuery).toString() %>" 
              class="<%= i === currentPage ? 'pagination__link active' : 'pagination__link' %>">
              <%= i %>
            </a>
          <% } %>
        </ul>
      </section>
    </div>
  </div>
</main>

<%- include("../../views/user/partials/footer") %>

<script src="/assets/js/user/shop.js"></script>
<!-- iziToast JS -->
<script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>
<script src="/assets/js/user/wishlist.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
 const cartButtons = document.querySelectorAll('.cart__btn');

 cartButtons.forEach(button => {
   button.addEventListener('click', function(event) {
     event.preventDefault();
     const productItem = this.closest('.product__item');
     
     // Find the product details link
     const productLink = productItem.querySelector('a[href^="/productDetails"]');
     
     if (!productLink) {
       console.error('Product link not found');
       iziToast.error({
         title: 'Error',
         message: 'Could not find product details',
         position: 'topRight'
       });
       return;
     }

     // Extract product ID from the link
     const productId = new URL(productLink.href, window.location.origin).searchParams.get('id');
     
     if (!productId) {
       console.error('Product ID not found');
       iziToast.error({
         title: 'Error',
         message: 'Could not extract product ID',
         position: 'topRight'
       });
       return;
     }

     const selectedCombo = {
      size: this.getAttribute('data-combo-size')
    };

      fetch('/add-to-cart', {
        method: 'POST',
        credentials: 'same-origin',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ 
          productId, 
          quantity: 1,
          selectedCombo 
        })
      })
     .then(response => {
       console.log('Response status:', response.status);
       
       if (!response.ok) {
         return response.json().then(errorData => {
           console.error('Error response:', errorData);
           throw new Error(errorData.message || 'Network response was not ok');
         });
       }
       
       return response.json();
     })
     .then(data => {
        if (data.success) {
          iziToast.success({
            title: 'Success',
            message: 'Product added to cart successfully!',
            position: 'topRight'
          });
        } else {
          // Check for limit exceeded error
          if (data.limitExceeded) {
            iziToast.warning({
              title: 'Cart Limit',
              message: 'You can only add up to 10 unique items to the cart.',
              position: 'topRight'
            });
          } else {
            iziToast.error({
              title: 'Error',
              message: data.message || 'Failed to add product to cart',
              position: 'topRight'
            });
          }
        }
      })
     .catch(error => {
       console.error('Full error:', error);
       iziToast.error({
         title: 'Error',
         message: error.message || 'An error occurred while adding the product to the cart',
         position: 'topRight'
       });
     });
   });
 });
});

//Wishlist functionality

document.addEventListener('DOMContentLoaded', function() {
    // Helper function to handle wishlist actions
    async function handleWishlist(event, heartIcon) {
        event.preventDefault();
        
        try {
            const productId = heartIcon.closest('a').dataset.productId;
            const response = await fetch(`/wishlist/add/${productId}`, {
                method: 'POST',
            });
            
            const data = await response.json();
            
            if (data.success) {
                heartIcon.style.color = '#00B207';
                iziToast.success({
                    title: 'Success',
                    message: 'Product added to wishlist',
                    position: 'topRight'
                });
            }
        } catch (error) {
            iziToast.error({
                title: 'Error',
                message: 'Failed to add product to wishlist',
                position: 'topRight'
            });
        }
    }

    // Add click event listeners to all wishlist icons
    document.querySelectorAll('.action__btn[aria-label="Add to Wishlist"]').forEach(btn => {
        const heartIcon = btn.querySelector('.fi-rs-heart');
        btn.setAttribute('data-product-id', btn.href.split('id=')[1]);
        btn.href = '#';
        
        btn.addEventListener('click', (e) => handleWishlist(e, heartIcon));
    });
});
</script>