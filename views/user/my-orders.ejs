<%- include("../../views/user/partials/header") %>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!--=============== FLATICON ===============-->
  <link rel="stylesheet" href="https://cdn-uicons.flaticon.com/2.0.0/uicons-regular-straight/css/uicons-regular-straight.css" />

  <!--=============== CSS ===============-->
  <link rel="stylesheet" href="/assets/css/styles.css" />

  <title>My Orders</title>
  <style>
    .orders-container {
      padding: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }

    .order-card {
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      background-color: var(--body-color);
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .order-details {
      display: flex;
      gap: 2rem;
      align-items: center;
    }

    .product-image {
      width: 120px;
      height: 120px;
      object-fit: cover;
      border-radius: 4px;
    }

    .product-info {
      flex: 1;
    }

    .status-tracker {
    display: flex;
    justify-content: space-between;
    margin: 1.5rem 0;
    position: relative;
    align-items: center; /* Add this line */
  }

  .status-step {
    text-align: center;
    flex: 1;
    position: relative;
    display: flex; /* Add this line */
    flex-direction: column; /* Add this line */
    align-items: center; /* Add this line */
  }

  .status-step.active {
    color: var(--first-color);
  }

  .status-line {
    position: absolute;
    top: 50%; /* Change from 25px to 50% */
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--border-color);
    z-index: 1;
    transform: translateY(-50%); /* Add this line */
  }

  .status-line.active {
    background-color: var(--first-color);
  }

  .status-dot {
    width: 12px;
    height: 12px;
    background-color: var(--border-color);
    border-radius: 50%;
    margin-bottom: 8px; /* Remove margin from top and apply to bottom */
    position: relative;
    z-index: 2;
  }

  .status-dot.active {
    background-color: var(--first-color);
  }
    .action-buttons {
      display: flex;
      gap: 1rem;
      margin-top: 1rem;
    }

    .btn {
      padding: 0.5rem 1rem;
      border-radius: 4px;
      cursor: pointer;
      border: none;
      font-weight: var(--weight-600);
    }

    .btn-primary {
      background-color: var(--first-color);
      color: white;
    }

    .btn-danger {
      background-color: #ff4444;
      color: white;
    }

    .pagination {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin-top: 2rem;
    }

    .pagination-btn {
      padding: 0.5rem 1rem;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      cursor: pointer;
      background-color: var(--body-color);
    }

    .pagination-btn.active {
      background-color: var(--first-color);
      color: white;
      border-color: var(--first-color);
    }
  </style>
</head>

<body>
    <!--=============== BREADCRUMB ===============-->
    <section class="breadcrumb">
      <ul class="breadcrumb__list flex container">
        <li><a href="/home" class="breadcrumb__link">Home</a></li>
        <li><span class="breadcrumb__link">></span></li>
        <li><a href="/user-profile" class="breadcrumb__link">Profile</a></li>
        <li><span class="breadcrumb__link">></span></li>
        <li><a href="/my-orders" class="breadcrumb__link">My Orders</a></li>
      </ul>
    </section>
  <div class="orders-container">
    <h2 class="section__title">My Orders</h2>
    <% orders.forEach(order => { %>
      <div class="order-card">
        <div class="order-header">
          <div>
            <h3><%= order.product.name %></h3>
            <p>Order #<%= order.orderId %></p>
            <p>Placed on: <%= order.placedOn %></p>
            <p>Total Quantity: <%= order.quantity %></p>
            <p class="total-amount">Total Amount: â‚¹<%= order.totalAmount %></p>
          </div>
          <% if (order.status === 4 && !order.return_reason) { %>
            <button class="btn btn-warning return-order-btn" data-order-id="<%= order.orderId %>">Return Order</button>
          <% } else if (order.status === 5) { %>
            <button class="btn btn-secondary return-order-btn" data-order-id="<%= order.orderId %>" disabled>Return request in process</button>
          <% } else if (order.status === 6) { %> 
            <button class="btn btn-success return-order-btn" data-order-id="<%= order.orderId %>" disabled>Returned</button>
          <% } else if (order.cancellation_reason) { %>
            <button class="btn btn-secondary cancel-order-btn" data-order-id="<%= order.orderId %>" disabled>Cancelled</button>
          <% } else { %>
            <button class="btn btn-danger cancel-order-btn" data-order-id="<%= order.orderId %>">Cancel Order</button>
          <% } %>
        </div>

        <div class="order-details">
          <img src="<%= order.product.image %>" alt="<%= order.product.name %>" class="product-image">
          <div class="product-info">
            <div class="status-tracker">
              <div class="status-line"></div>
              <div class="status-step <%= order.status >= 1 ? 'active' : '' %>">
                <div class="status-dot <%= order.status >= 1 ? 'active' : '' %>"></div>
                <span>Order Placed</span>
              </div>
              <div class="status-step <%= order.status >= 2 ? 'active' : '' %>">
                <div class="status-dot <%= order.status >= 2 ? 'active' : '' %>"></div>
                <span>Processing</span>
              </div>
              <div class="status-step <%= order.status >= 3 ? 'active' : '' %>">
                <div class="status-dot <%= order.status >= 3 ? 'active' : '' %>"></div>
                <span>Shipped</span>
              </div>
              <div class="status-step <%= order.status >= 4 ? 'active' : '' %>">
                <div class="status-dot <%= order.status >= 4 ? 'active' : '' %>"></div>
                <span>Delivered</span>
              </div>
            </div>
          </div>
        </div>

        <div class="action-buttons">
          <button class="btn btn-primary buy-again-btn" data-product-id="<%= order.product._id %>">Buy Again</button>
        </div>
      </div>
    <% }) %>

    <div class="pagination">
      <% if (currentPage > 1) { %>
        <a href="/my-orders?page=<%= currentPage - 1 %>" class="pagination-btn">Previous</a>
      <% } %>
      
      <% for(let i = 1; i <= totalPages; i++) { %>
        <a href="/my-orders?page=<%= i %>" class="pagination-btn <%= currentPage === i ? 'active' : '' %>"><%= i %></a>
      <% } %>
      
      <% if (currentPage < totalPages) { %>
        <a href="/my-orders?page=<%= currentPage + 1 %>" class="pagination-btn">Next</a>
      <% } %>
    </div>
  </div>

<!-- Cancel Order Modal -->
<div id="cancelOrderModal" class="modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 1000; width: 500px; min-height: 300px;">
  <h3>Cancel Order</h3>
  <p>Please provide a reason for cancellation</p>
  <textarea id="cancellationReason" placeholder="Enter your reason here..." style="width: 100%; min-height: 100px; margin: 10px 0; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"></textarea>
  <div style="text-align: right;">
    <button id="closeModal" style="margin-right: 10px; padding: 8px 16px; border: none; border-radius: 4px; background: #f5f5f5; cursor: pointer;">Close</button>
    <button id="confirmCancel" style="padding: 8px 16px; border: none; border-radius: 4px; background: #dc3545; color: white; cursor: pointer;">Confirm</button>
  </div>
</div>

<!-- Return Order Modal -->
<div id="returnOrderModal" class="modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 1000; width: 500px; min-height: 300px;">
  <h3>Return Order</h3>
  <p>Please provide a reason for return</p>
  <textarea id="returnReason" placeholder="Enter your reason here..." style="width: 100%; min-height: 100px; margin: 10px 0; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"></textarea>
  <div style="text-align: right;">
    <button id="closeReturnModal" style="margin-right: 10px; padding: 8px 16px; border: none; border-radius: 4px; background: #f5f5f5; cursor: pointer;">Close</button>
    <button id="confirmReturn" style="padding: 8px 16px; border: none; border-radius: 4px; background: #dc3545; color: white; cursor: pointer;">Confirm</button>
  </div>
</div>

</body>

<%- include("../../views/user/partials/footer") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
//Cancel Order Handler
document.querySelectorAll('.cancel-order-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const orderId = e.target.getAttribute('data-order-id');
    
    // Show modal
    const modal = document.getElementById('cancelOrderModal');
    modal.style.display = 'block';

    // Handle modal close
    document.getElementById('closeModal').addEventListener('click', () => {
      modal.style.display = 'none';
    });

    // Handle cancel confirmation
    document.getElementById('confirmCancel').addEventListener('click', async () => {
      const cancellationReason = document.getElementById('cancellationReason').value.trim();
      
      if (!cancellationReason) {
        alert('Please provide a reason for cancellation.');
        return;
      }

      try {
        const response = await fetch(`/cancel-order/${orderId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ cancellationReason })
        });
        console.log('Fetch response:', response); // Debugging
        const data = await response.json();
        
        if (data.success) {
          Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success');
          
          // Update the button (use e.target or find the specific button by orderId)
          const buttonToUpdate = document.querySelector(`.cancel-order-btn[data-order-id="${orderId}"]`);
          if (buttonToUpdate) {
            buttonToUpdate.textContent = 'Cancelled';
            buttonToUpdate.disabled = true;
            buttonToUpdate.classList.remove('btn-danger'); // Optional: Remove danger class
            buttonToUpdate.classList.add('btn-secondary'); // Optional: Add a different style
          } else {
            console.error('Button not found for orderId:', orderId); // Debugging
          }
          
          modal.style.display = 'none'; // Hide modal on success
        } else {
          Swal.fire('Error', data.message || 'Failed to cancel order', 'error');
        }
      } catch (error) {
        console.error('Fetch error:', error); // Debugging
        Swal.fire('Error', 'Something went wrong', 'error');
      }
    });
  });
});

// Return Order Handling
document.querySelectorAll('.return-order-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const orderId = e.target.getAttribute('data-order-id');
    const modal = document.getElementById('returnOrderModal');
    modal.style.display = 'block';

    document.getElementById('closeReturnModal').onclick = () => modal.style.display = 'none';

    document.getElementById('confirmReturn').onclick = async () => {
      const returnReason = document.getElementById('returnReason').value.trim();
      if (!returnReason) {
        alert('Please provide a reason for return.');
        return;
      }

      try {
        const response = await fetch(`/return-order/${orderId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ returnReason })
        });
        const data = await response.json();
        
        if (data.success) {
          Swal.fire('Success!', 'Your return request has been submitted.', 'success');
          button.textContent = 'Return Request In Process';
          button.disabled = true;
          button.classList.replace('btn-warning', 'btn-secondary');
          modal.style.display = 'none';
        } else {
          Swal.fire('Error', data.message || 'Failed to process return request', 'error');
        }
      } catch (error) {
        Swal.fire('Error', 'Something went wrong', 'error');
      }
    };
  });
});

// Buy Again Handler
document.querySelectorAll('.buy-again-btn').forEach(button => {
  button.addEventListener('click', (e) => {
    const productId = e.target.getAttribute('data-product-id');
    if (productId) {
      window.location.href = `/productDetails?id=${productId}`;
    } else {
      Swal.fire('Error', 'Product ID not found', 'error');
    }
  });
});
</script>